<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa" xmlns:camel="http://camel.apache.org/schema/spring"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">

	<!-- Scans the classpath for annotated components -->
	<context:component-scan base-package="io.strandberg.jta.examples" />

	<!-- Create proxy instances of Repository interfaces -->
	<jpa:repositories base-package="io.strandberg.jta.examples" />

	<!-- Annotation driven transactions -->
	<tx:annotation-driven transaction-manager="transactionManager" />

	<!-- camel -->
	<camel:camelContext>
		<!-- let Camel use those @Component scanned route builders -->
		<camel:contextScan />
	</camel:camelContext>

	<bean id="PROPAGATION_REQUIRED" class="org.apache.camel.spring.spi.SpringTransactionPolicy">
		<property name="transactionManager" ref="transactionManager" />
		<property name="propagationBehaviorName" value="PROPAGATION_REQUIRED" />
	</bean>

	<bean id="PROPAGATION_REQUIRES_NEW" class="org.apache.camel.spring.spi.SpringTransactionPolicy">
		<property name="transactionManager" ref="transactionManager" />
		<property name="propagationBehaviorName" value="PROPAGATION_REQUIRES_NEW" />
	</bean>

	<bean id="jms" class="org.apache.camel.component.jms.JmsComponent">
		<property name="configuration" ref="jmsConfig" />
	</bean>

	<bean id="jmsConfig" class="org.apache.camel.component.jms.JmsConfiguration">
		<property name="connectionFactory" ref="atomikosJmsConnectionFactory" />
		<property name="transactionManager" ref="transactionManager" />
		<!-- 'transacted' must be set to false for XA transactions. The name of 
			this property is misleading. What it really indicates is whether or not the 
			Camel JMS component supports local transactions -->
		<property name="transacted" value="false" />
		<property name="cacheLevelName" value="CACHE_NONE" />
	</bean>

	<!-- Atomikos JTA transaction manager -->
	<bean id="transactionManager"
		class="org.springframework.transaction.jta.JtaTransactionManager">
		<property name="allowCustomIsolationLevels" value="true" />

		<property name="transactionManager">
			<bean class="com.atomikos.icatch.jta.UserTransactionManager"
				init-method="init" destroy-method="close">
				<property name="forceShutdown" value="false" />
			</bean>
		</property>

		<property name="userTransaction">
			<bean class="com.atomikos.icatch.jta.J2eeUserTransaction">
				<property name="transactionTimeout" value="300" />
			</bean>
		</property>
	</bean>

	<!-- JPA -->
	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<!-- Entity annotation scan -->
		<property name="packagesToScan" value="io.strandberg.jta.examples" />
		<!-- Data source (H2) -->
		<property name="jtaDataSource">
			<bean class="com.atomikos.jdbc.AtomikosDataSourceBean"
				init-method="init" destroy-method="close">
				<property name="uniqueResourceName" value="AtomikosDataSource" />
				<!-- <property name="poolSize" value="5"/> <property name="testQuery" 
					value="SELECT 1"/> <property name="xaDataSource"> <bean class="org.h2.jdbcx.JdbcDataSource"> 
					<property name="URL" value="jdbc:h2:mem:db"/> <property name="user" value="user"/> 
					<property name="password" value="password"/> </bean> </property> -->
				<property name="xaDataSourceClassName">
					<value>com.mysql.jdbc.jdbc2.optional.MysqlXADataSource</value>
				</property>
				<property name="xaProperties">
					<props>
						<prop key="databaseName">companyB</prop>
						<prop key="serverName">localhost</prop>
						<prop key="port">3306</prop>
						<prop key="user">root</prop>
						<prop key="password">xenmish@1982</prop>
						<prop key="url">jdbc:mysql://localhost:3306/companyB</prop>
					</props>
				</property>
			</bean>
		</property>
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" />
		</property>
		<property name="jpaProperties">
			<props>
				<prop key="hibernate.transaction.factory_class">org.hibernate.transaction.CMTTransactionFactory
				</prop>
				<!-- Setup Hibernate to participate in the Atomikos transaction -->
				<prop key="hibernate.transaction.manager_lookup_class">com.atomikos.icatch.jta.hibernate3.TransactionManagerLookup
				</prop>
				<prop key="hibernate.hbm2ddl.auto">create-drop</prop>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5InnoDBDialect</prop>
			</props>
		</property>
	</bean>

	<!-- ActiveMQ connection factory -->
	<!-- JTA/XA-enabled JMS -->
	<bean id="atomikosJmsConnectionFactory" class="com.atomikos.jms.AtomikosConnectionFactoryBean"
		init-method="init">
		<property name="uniqueResourceName" value="ActiveMQXA" />
		<property name="poolSize" value="5" />
		<property name="maxPoolSize" value="10" />
		<property name="xaConnectionFactory">
			<bean class="org.apache.activemq.ActiveMQXAConnectionFactory">
				<property name="brokerURL" value="vm://localhost?broker.persistent=false" />
			</bean>
		</property>
	</bean>


	<bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
		<property name="connectionFactory" ref="atomikosJmsConnectionFactory" />
		<property name="receiveTimeout" value="2000" />
		<!-- "sessionTransacted" has to be set to "true" to start an transaction 
			for every incoming JMS message -->
		<property name="sessionTransacted" value="true" />
		<!-- sessionAcknowledgeMode has to be set to javax.jms.Session.SESSION_TRANSACTED -->
		<property name="sessionAcknowledgeMode" value="0" />
	</bean>

</beans>
